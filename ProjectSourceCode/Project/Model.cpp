#include "Model.h"
#include <vector>
#include "tools/Shader.h"
#include <corecrt_math_defines.h>

//Alexis (can be deleted probs, since cube is already created earlier)

static const int ALEXISOFFSET = 0.5;

cubeList::cubeList(bool shuffle) {
    shuffling = shuffle;
    jamesShuffling = shuffle;
    jayShuffling = shuffle;
    moShuffling = shuffle;
    pabloShuffling = shuffle;
    akhiShuffling = shuffle;
}



//VAOs
unsigned int cubeList::createOriginalCube()
{
    vec3 vertexArray[] = {
        vec3(-0.5f,-0.5f,-0.5f), vec3(1.0f, 0.0f, 0.0f), //left - red
        vec3(-0.5f,-0.5f, 0.5f), vec3(1.0f, 0.0f, 0.0f),
        vec3(-0.5f, 0.5f, 0.5f), vec3(1.0f, 0.0f, 0.0f),

        vec3(-0.5f,-0.5f,-0.5f), vec3(1.0f, 0.0f, 0.0f),
        vec3(-0.5f, 0.5f, 0.5f), vec3(1.0f, 0.0f, 0.0f),
        vec3(-0.5f, 0.5f,-0.5f), vec3(1.0f, 0.0f, 0.0f),

        vec3(0.5f, 0.5f,-0.5f), vec3(0.0f, 0.0f, 1.0f), // far - blue
        vec3(-0.5f,-0.5f,-0.5f), vec3(0.0f, 0.0f, 1.0f),
        vec3(-0.5f, 0.5f,-0.5f), vec3(0.0f, 0.0f, 1.0f),

        vec3(0.5f, 0.5f,-0.5f), vec3(0.0f, 0.0f, 1.0f),
        vec3(0.5f,-0.5f,-0.5f), vec3(0.0f, 0.0f, 1.0f),
        vec3(-0.5f,-0.5f,-0.5f), vec3(0.0f, 0.0f, 1.0f),

        vec3(0.5f,-0.5f, 0.5f), vec3(0.0f, 1.0f, 1.0f), // bottom - turquoise
        vec3(-0.5f,-0.5f,-0.5f), vec3(0.0f, 1.0f, 1.0f),
        vec3(0.5f,-0.5f,-0.5f), vec3(0.0f, 1.0f, 1.0f),

        vec3(0.5f,-0.5f, 0.5f), vec3(0.0f, 1.0f, 1.0f),
        vec3(-0.5f,-0.5f, 0.5f), vec3(0.0f, 1.0f, 1.0f),
        vec3(-0.5f,-0.5f,-0.5f), vec3(0.0f, 1.0f, 1.0f),

        vec3(-0.5f, 0.5f, 0.5f), vec3(0.0f, 1.0f, 0.0f), // near - green
        vec3(-0.5f,-0.5f, 0.5f), vec3(0.0f, 1.0f, 0.0f),
        vec3(0.5f,-0.5f, 0.5f), vec3(0.0f, 1.0f, 0.0f),

        vec3(0.5f, 0.5f, 0.5f), vec3(0.0f, 1.0f, 0.0f),
        vec3(-0.5f, 0.5f, 0.5f), vec3(0.0f, 1.0f, 0.0f),
        vec3(0.5f,-0.5f, 0.5f), vec3(0.0f, 1.0f, 0.0f),

        vec3(0.5f, 0.5f, 0.5f), vec3(1.0f, 0.0f, 1.0f), // right - purple
        vec3(0.5f,-0.5f,-0.5f), vec3(1.0f, 0.0f, 1.0f),
        vec3(0.5f, 0.5f,-0.5f), vec3(1.0f, 0.0f, 1.0f),

        vec3(0.5f,-0.5f,-0.5f), vec3(1.0f, 0.0f, 1.0f),
        vec3(0.5f, 0.5f, 0.5f), vec3(1.0f, 0.0f, 1.0f),
        vec3(0.5f,-0.5f, 0.5f), vec3(1.0f, 0.0f, 1.0f),

        vec3(0.5f, 0.5f, 0.5f), vec3(1.0f, 1.0f, 0.0f), // top - yellow
        vec3(0.5f, 0.5f,-0.5f), vec3(1.0f, 1.0f, 0.0f),
        vec3(-0.5f, 0.5f,-0.5f), vec3(1.0f, 1.0f, 0.0f),

        vec3(0.5f, 0.5f, 0.5f), vec3(1.0f, 1.0f, 0.0f),
        vec3(-0.5f, 0.5f,-0.5f), vec3(1.0f, 1.0f, 0.0f),
        vec3(-0.5f, 0.5f, 0.5f), vec3(1.0f, 1.0f, 0.0f)
    };


    // Create a vertex array

    GLuint vertexArrayObject;
    glGenVertexArrays(1, &vertexArrayObject);
    glBindVertexArray(vertexArrayObject);


    // Upload Vertex Buffer to the GPU, keep a reference to it (vertexBufferObject)
    GLuint vertexBufferObject;
    glGenBuffers(1, &vertexBufferObject);
    glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertexArray), vertexArray, GL_STATIC_DRAW);

    // position attribute
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // normal attribute
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);

    glBindVertexArray(0);
    return vertexArrayObject;
}





// cubes with normals, add color/texture to this and remove fixed color in shader
unsigned int cubeList::createVertexNormal()
{
    unsigned int cubeVAO = 0;
    unsigned int cubeVBO = 0;
    float vertices[] = {
        // positions          // normals           // texture coords
           -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,
            0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 0.0f,
            0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,
            0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,
           -0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 1.0f,
           -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,

           -0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 0.0f,
            0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 0.0f,
            0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 1.0f,
            0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 1.0f,
           -0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 1.0f,
           -0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 0.0f,

           -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 0.0f,
           -0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
           -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
           -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
           -0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
           -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 0.0f,

            0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,
            0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
            0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
            0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
            0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
            0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,

           -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 1.0f,
            0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 1.0f,
            0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 0.0f,
            0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 0.0f,
           -0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 0.0f,
           -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 1.0f,

           -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 1.0f,
            0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 1.0f,
            0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 0.0f,
            0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 0.0f,
           -0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 0.0f,
           -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 1.0f
    };



    glGenVertexArrays(1, &cubeVAO);
    glGenBuffers(1, &cubeVBO);
    // fill buffer
    glBindBuffer(GL_ARRAY_BUFFER, cubeVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    // link vertex attributes
    glBindVertexArray(cubeVAO);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(1);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(2);
    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);

    return cubeVAO;
}

unsigned int cubeList::createLightVertexNormal()
{
    float vertices[] = {
        // positions          // normals           // texture coords
           -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,
            0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 0.0f,
            0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,
            0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,
           -0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 1.0f,
           -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,

           -0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 0.0f,
            0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 0.0f,
            0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 1.0f,
            0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 1.0f,
           -0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 1.0f,
           -0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 0.0f,

           -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 0.0f,
           -0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
           -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
           -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
           -0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
           -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 0.0f,

            0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,
            0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
            0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
            0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
            0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
            0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,

           -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 1.0f,
            0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 1.0f,
            0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 0.0f,
            0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 0.0f,
           -0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 0.0f,
           -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 1.0f,

           -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 1.0f,
            0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 1.0f,
            0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 0.0f,
            0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 0.0f,
           -0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 0.0f,
           -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 1.0f
    };

    unsigned int VBO;
    glGenBuffers(1, &VBO);


    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);



    unsigned int lightCubeVAO;
    glGenVertexArrays(1, &lightCubeVAO);
    glBindVertexArray(lightCubeVAO);
    // we only need to bind to the VBO, the container's VBO's data already contains the data.
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    // set the vertex attribute 

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);


    return lightCubeVAO;
}

unsigned int cubeList::createOriginalWall()
{
    vec3 vertexArray[] = {
        vec3(-0.5f,-0.5f,-0.5f), vec3(1.0f, 01.0f, 01.0f), //left - red
        vec3(-0.5f,-0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(-0.5f, 0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),

        vec3(-0.5f,-0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(-0.5f, 0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(-0.5f, 0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),

        vec3(0.5f, 0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(-0.5f,-0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(-0.5f, 0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),

        vec3(0.5f, 0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(0.5f,-0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(-0.5f,-0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),

        vec3(0.5f,-0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(-0.5f,-0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(0.5f,-0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),

        vec3(0.5f,-0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(-0.5f,-0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(-0.5f,-0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),

        vec3(-0.5f, 0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(-0.5f,-0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(0.5f,-0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),

        vec3(0.5f, 0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(-0.5f, 0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(0.5f,-0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),

        vec3(0.5f, 0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(0.5f,-0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(0.5f, 0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),

        vec3(0.5f,-0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(0.5f, 0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(0.5f,-0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),

        vec3(0.5f, 0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(0.5f, 0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(-0.5f, 0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),

        vec3(0.5f, 0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(-0.5f, 0.5f,-0.5f), vec3(01.0f, 01.0f, 01.0f),
        vec3(-0.5f, 0.5f, 0.5f), vec3(01.0f, 01.0f, 01.0f)
    };


    // Create a vertex array

    GLuint vertexArrayObject;
    glGenVertexArrays(1, &vertexArrayObject);
    glBindVertexArray(vertexArrayObject);


    // Upload Vertex Buffer to the GPU, keep a reference to it (vertexBufferObject)
    GLuint vertexBufferObject;
    glGenBuffers(1, &vertexBufferObject);
    glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertexArray), vertexArray, GL_STATIC_DRAW);

    glVertexAttribPointer(0,                   // attribute 0 matches aPos in Vertex Shader
        3,                   // size
        GL_FLOAT,            // type
        GL_FALSE,            // normalized?
        2 * sizeof(vec3), // stride - each vertex contain 2 vec3 (position, color)
        (void*)0             // array buffer offset
    );
    glEnableVertexAttribArray(0);


    glVertexAttribPointer(1,                            // attribute 1 matches aColor in Vertex Shader
        3,
        GL_FLOAT,
        GL_FALSE,
        2 * sizeof(vec3),
        (void*)sizeof(vec3)      // color is offseted a vec3 (comes after position)
    );
    glEnableVertexAttribArray(1);

    glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);

    glBindVertexArray(0);
    return vertexArrayObject;
}

unsigned int cubeList::createSphere() {
    vec3 vertexArray[] = {
vec3(0.0, 0.19509032368659973, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.0, 0.3826834559440613, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.0, 0.5555702447891235, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.0, 0.7071067690849304, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.0, 0.8314696550369263, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.0, 0.9238795042037964, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.0, 0.9807852506637573, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.0, 1.0, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.0, 0.9807853102684021, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.0, 0.5555701851844788, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.03806029632687569, 0.19134171307086945, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.07465790957212448, 0.3753302991390228, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.10838644951581955, 0.5448951125144958, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.13794974982738495, 0.6935198903083801, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.16221174597740173, 0.8154931664466858, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.18024000525474548, 0.906127393245697, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.19134177267551422, 0.9619396924972534, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.1950903832912445, 0.9807852506637573, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.19134178757667542, 0.9619397521018982, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.18024002015590668, 0.9061274528503418, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.16221174597740173, 0.8154931664466858, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.13794974982738495, 0.6935198903083801, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.10838643461465836, 0.5448950529098511, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.0746578723192215, 0.3753301203250885, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.038060251623392105, 0.19134147465229034, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.07465796172618866, 0.1802399456501007, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.14644673466682434, 0.3535534143447876, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.21260765194892883, 0.513279914855957, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.2705981731414795, 0.6532813906669617, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3181897699832916, 0.7681776881217957, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3535534739494324, 0.853553295135498, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.37533038854599, 0.9061273336410522, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.38268354535102844, 0.9238794445991516, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.37533038854599, 0.9061273336410522, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.35355350375175476, 0.8535533547401428, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3181897699832916, 0.7681776881217957, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.2705981731414795, 0.6532813906669617, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.21260762214660645, 0.5132798552513123, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.14644667506217957, 0.35355323553085327, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.0746578648686409, 0.1802397072315216, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.1083865687251091, 0.16221162676811218, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.2126077115535736, 0.3181896209716797, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3086584508419037, 0.4619396924972534, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3928476572036743, 0.5879377126693726, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.4619399309158325, 0.6913416385650635, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5132800936698914, 0.7681776285171509, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5448952317237854, 0.8154929876327515, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5555704236030579, 0.8314694762229919, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5448952317237854, 0.8154929876327515, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5132800936698914, 0.7681776881217957, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.4619399309158325, 0.6913416385650635, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3928476572036743, 0.5879377126693726, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3086584210395813, 0.46193963289260864, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.21260762214660645, 0.31818947196006775, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.10838641971349716, 0.16221143305301666, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.13794992864131927, 0.137949600815773, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.27059829235076904, 0.2705979645252228, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3928476870059967, 0.39284735918045044, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5000001788139343, 0.49999988079071045, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5879380106925964, 0.5879376530647278, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6532816290855408, 0.6532813310623169, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6935200691223145, 0.6935197114944458, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.7071070075035095, 0.7071065902709961, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6935200691223145, 0.6935197114944458, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6532816290855408, 0.6532813906669617, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5879380106925964, 0.5879376530647278, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5000001788139343, 0.49999988079071045, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3928476572036743, 0.39284729957580566, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.2705981731414795, 0.2705978751182556, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.13794973492622375, 0.13794943690299988, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.16221193969249725, 0.10838623344898224, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.31818991899490356, 0.21260739862918854, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.4619399905204773, 0.3086581230163574, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5879380106925964, 0.39284729957580566, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6913419365882874, 0.46193957328796387, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.7681779265403748, 0.5132797956466675, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8154932856559753, 0.544894814491272, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8314698338508606, 0.5555700063705444, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8154932856559753, 0.544894814491272, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.7681779265403748, 0.5132798552513123, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6913419365882874, 0.46193957328796387, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5879380106925964, 0.39284729957580566, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.4619399309158325, 0.30865806341171265, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.318189799785614, 0.21260732412338257, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.16221173107624054, 0.10838610678911209, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.18024024367332458, 0.0746576264500618, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3535536825656891, 0.14644642174243927, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5132802128791809, 0.21260732412338257, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6532816886901855, 0.27059781551361084, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.7681779861450195, 0.3181893825531006, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8535535335540771, 0.3535531759262085, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9061275124549866, 0.3753299117088318, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9238797426223755, 0.3826831579208374, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9061275124549866, 0.3753299117088318, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8535535335540771, 0.35355323553085327, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.7681779861450195, 0.3181893825531006, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6532816886901855, 0.27059781551361084, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5132801532745361, 0.2126072645187378, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.35355353355407715, 0.1464463770389557, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.18024000525474548, 0.07465755194425583, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.19134201109409332, 0.038059964776039124, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3753305673599243, 0.07465757429599762, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.544895350933075, 0.10838611423969269, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6935201287269592, 0.13794942200183868, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8154933452606201, 0.1622113734483719, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9061275720596313, 0.1802397072315216, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.961939811706543, 0.1913413405418396, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9807854890823364, 0.19508999586105347, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.961939811706543, 0.1913413405418396, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9061275720596313, 0.18023976683616638, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8154933452606201, 0.1622113734483719, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6935201287269592, 0.13794942200183868, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5448952913284302, 0.1083860695362091, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3753304183483124, 0.07465755939483643, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.19134175777435303, 0.038059934973716736, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.19509060680866241, -3.2663592719472945e-07, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3826836943626404, -3.191853465978056e-07, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5555704832077026, -3.117347660008818e-07, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.7071069478988647, -3.191853465978056e-07, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8314697742462158, -3.340865077916533e-07, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9238796830177307, -2.7448186301626265e-07, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9807852506637573, -3.936911525670439e-07, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(1.000000238418579, -3.7878999137319624e-07, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9807852506637573, -3.936911525670439e-07, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9238796830177307, -2.2977837943471968e-07, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8314697742462158, -3.340865077916533e-07, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.7071069478988647, -3.191853465978056e-07, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5555703639984131, -3.415370883885771e-07, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.38268354535102844, -3.0428418540395796e-07, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.1950903683900833, -3.080094757024199e-07, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.19134199619293213, -0.038060616701841354, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.37533053755760193, -0.07465820759534836, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.544895350933075, -0.10838674008846283, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6935200691223145, -0.13795003294944763, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8154932856559753, -0.16221202909946442, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9061275720596313, -0.18024025857448578, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9619396924972534, -0.19134210050106049, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9807854890823364, -0.19509074091911316, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9619396924972534, -0.19134210050106049, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9061275720596313, -0.1802402138710022, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8154932856559753, -0.16221202909946442, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6935200691223145, -0.13795003294944763, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5448952317237854, -0.10838674753904343, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.37533038854599, -0.07465816289186478, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.19134175777435303, -0.03806055337190628, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.180240198969841, -0.07465826719999313, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3535536229610443, -0.14644701778888702, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5132801532745361, -0.21260792016983032, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6532816290855408, -0.2705984115600586, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.7681778073310852, -0.3181900382041931, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8535535335540771, -0.3535537123680115, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9061273336410522, -0.3753306269645691, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9238796830177307, -0.3826838731765747, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.9061273336410522, -0.3753306269645691, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8535535335540771, -0.3535536527633667, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.7681778073310852, -0.3181900382041931, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6532816290855408, -0.2705984115600586, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5132800340652466, -0.21260792016983032, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3535534739494324, -0.14644695818424225, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.1802399903535843, -0.07465816289186478, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.16221188008785248, -0.10838685184717178, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3181898593902588, -0.2126079499721527, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.4619399309158325, -0.3086586892604828, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5879379510879517, -0.39284783601760864, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.691341757774353, -0.4619401693344116, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.76817786693573, -0.5132802724838257, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8154930472373962, -0.5448954105377197, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.831469714641571, -0.555570662021637, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.8154930472373962, -0.5448954105377197, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.76817786693573, -0.5132802724838257, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.691341757774353, -0.4619401693344116, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5879379510879517, -0.39284783601760864, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.46193981170654297, -0.3086586594581604, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.31818971037864685, -0.21260789036750793, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.16221170127391815, -0.10838671773672104, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.1379498541355133, -0.13795019686222076, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.27059823274612427, -0.27059850096702576, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.39284759759902954, -0.3928478956222534, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5000000596046448, -0.5000003576278687, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5879377722740173, -0.5879381895065308, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6532816290855408, -0.6532818078994751, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6935198307037354, -0.693520188331604, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.7071068286895752, -0.7071072459220886, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6935198307037354, -0.693520188331604, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.6532816290855408, -0.6532818078994751, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5879377722740173, -0.5879381895065308, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5000000596046448, -0.5000003576278687, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3928475081920624, -0.39284783601760864, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.27059808373451233, -0.2705984115600586, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.13794970512390137, -0.13795003294944763, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.10838649421930313, -0.16221219301223755, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.21260765194892883, -0.3181900978088379, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3086583614349365, -0.4619401693344116, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3928475081920624, -0.5879381895065308, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.4619397222995758, -0.6913420557975769, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5132800936698914, -0.7681781053543091, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5448949933052063, -0.8154934048652649, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5555702447891235, -0.8314700722694397, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5448949933052063, -0.8154934048652649, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.5132800936698914, -0.7681781053543091, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.4619397222995758, -0.6913420557975769, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3928475081920624, -0.5879381895065308, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.30865827202796936, -0.46194010972976685, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.21260754764080048, -0.31818997859954834, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.10838638991117477, -0.16221201419830322, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.0, -3.2584136988589307e-07, -1.0),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.07465791702270508, -0.1802404820919037, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.14644670486450195, -0.353553831577301, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.21260759234428406, -0.5132803916931152, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.27059802412986755, -0.6532818078994751, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3181895613670349, -0.7681780457496643, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3535534739494324, -0.8535537123680115, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3753301501274109, -0.9061276316642761, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3826833963394165, -0.9238799810409546, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3753301501274109, -0.9061276316642761, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3535534739494324, -0.8535537123680115, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.3181895613670349, -0.7681780457496643, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.27059802412986755, -0.6532818078994751, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.2126075029373169, -0.5132802724838257, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.1464466154575348, -0.3535537123680115, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.0746578499674797, -0.18024028837680817, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.0380602702498436, -0.19134224951267242, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.07465790212154388, -0.37533071637153625, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.10838642716407776, -0.5448955297470093, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.13794966042041779, -0.6935202479362488, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.1622115671634674, -0.8154933452606201, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.18024002015590668, -0.9061277508735657, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.1913416087627411, -0.9619399309158325, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.19509024918079376, -0.9807857275009155, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.1913416087627411, -0.9619399309158325, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.18024002015590668, -0.9061277508735657, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.1622115671634674, -0.8154933452606201, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.13794966042041779, -0.6935202479362488, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.10838636010885239, -0.5448954105377197, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.07465784251689911, -0.3753305971622467, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(0.03806024044752121, -0.1913420408964157, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-7.2120158733923745e-09, -0.19509084522724152, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(4.121675800661251e-08, -0.3826838433742523, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(2.6315596812764852e-08, -0.555570662021637, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-2.5838467365701945e-08, -0.7071070671081543, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-8.544311214109257e-08, -0.831469714641571, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(6.356849979738399e-08, -0.923879861831665, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-8.544311214109257e-08, -0.9807853698730469, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-1.0034427333494023e-07, -1.0000003576278687, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-8.544311214109257e-08, -0.9807853698730469, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(6.356849979738399e-08, -0.923879861831665, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-8.544311214109257e-08, -0.831469714641571, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-2.5838467365701945e-08, -0.7071070671081543, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-1.0937306171854289e-08, -0.5555704832077026, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(3.963855021993368e-09, -0.38268372416496277, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(3.963855021993368e-09, -0.1950906366109848, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.03806028142571449, -0.19134221971035004, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.07465781271457672, -0.3753306567668915, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.10838636755943298, -0.5448955297470093, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.13794972002506256, -0.693520188331604, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.16221173107624054, -0.8154932260513306, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.18023990094661713, -0.9061277508735657, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.19134175777435303, -0.961939811706543, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.19509044289588928, -0.980785608291626, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.19134175777435303, -0.961939811706543, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.18023990094661713, -0.9061277508735657, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.16221173107624054, -0.8154932260513306, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.13794972002506256, -0.693520188331604, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.10838636755943298, -0.544895350933075, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.07465782016515732, -0.37533053755760193, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.038060229271650314, -0.19134202599525452, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.07465790957212448, -0.1802404373884201, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.1464466005563736, -0.35355374217033386, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.21260753273963928, -0.5132803916931152, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.27059805393218994, -0.6532817482948303, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.3181896507740021, -0.7681777477264404, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.35355332493782043, -0.8535537123680115, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.37533026933670044, -0.9061274528503418, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.38268357515335083, -0.9238798022270203, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.37533026933670044, -0.9061274528503418, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.35355332493782043, -0.8535537123680115, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.3181896507740021, -0.7681777477264404, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.27059805393218994, -0.6532817482948303, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.2126075029373169, -0.5132802128791809, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.1464465856552124, -0.3535536229610443, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.07465782016515732, -0.18024024367332458, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.10838647186756134, -0.16221213340759277, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.2126075178384781, -0.31818997859954834, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.30865830183029175, -0.4619401693344116, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.39284747838974, -0.5879380702972412, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.4619396924972534, -0.6913416981697083, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.513279914855957, -0.7681780457496643, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5448950529098511, -0.8154931664466858, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5555703639984131, -0.8314698338508606, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5448950529098511, -0.8154931664466858, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.513279914855957, -0.7681780457496643, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.4619396924972534, -0.6913416981697083, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.39284747838974, -0.5879380702972412, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.308658242225647, -0.4619399905204773, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.2126074731349945, -0.3181898593902588, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.10838634520769119, -0.16221195459365845, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-2.304045381151809e-07, -5.562458795793646e-07, 1.0),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.13794980943202972, -0.1379501223564148, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.27059805393218994, -0.2705983519554138, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.3928475081920624, -0.39284786581993103, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5, -0.5000002384185791, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5879376530647278, -0.5879377722740173, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6532813906669617, -0.6532817482948303, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6935197710990906, -0.6935198903083801, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.70710688829422, -0.7071069478988647, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6935197710990906, -0.6935198903083801, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6532813906669617, -0.6532817482948303, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5879376530647278, -0.5879377722740173, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5, -0.5000002384185791, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.3928474187850952, -0.3928476870059967, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.27059799432754517, -0.27059826254844666, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.1379496455192566, -0.13794997334480286, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.1622118055820465, -0.10838677734136581, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.3181896507740021, -0.21260780096054077, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.4619397819042206, -0.308658629655838, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5879377722740173, -0.3928477168083191, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6913415193557739, -0.4619397819042206, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.7681776881217957, -0.5132802724838257, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.8154929280281067, -0.5448950529098511, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.8314696550369263, -0.5555703639984131, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.8154929280281067, -0.5448950529098511, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.7681776881217957, -0.5132802724838257, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6913415193557739, -0.4619397819042206, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5879377722740173, -0.3928477168083191, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.4619396924972534, -0.3086584806442261, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.3181895613670349, -0.2126077115535736, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.16221162676811218, -0.10838665813207626, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.18024009466171265, -0.07465820759534836, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.3535533547401428, -0.14644686877727509, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5132799744606018, -0.21260783076286316, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6532814502716064, -0.27059826254844666, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.7681774497032166, -0.31818968057632446, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.8535533547401428, -0.3535537123680115, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9061271548271179, -0.37533023953437805, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9238795042037964, -0.38268354535102844, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9061271548271179, -0.37533023953437805, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.8535533547401428, -0.3535537123680115, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.7681774497032166, -0.31818968057632446, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6532814502716064, -0.27059826254844666, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5132798552513123, -0.212607741355896, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.35355326533317566, -0.1464468091726303, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.18023988604545593, -0.0746581181883812, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.19134186208248138, -0.03806057572364807, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.37533020973205566, -0.07465810328722, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5448951125144958, -0.10838666558265686, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6935198903083801, -0.1379498839378357, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.8154928088188171, -0.16221174597740173, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.906127393245697, -0.18024027347564697, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9619393944740295, -0.19134174287319183, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9807851910591125, -0.19509044289588928, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9619393944740295, -0.19134174287319183, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.906127393245697, -0.18024027347564697, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.8154928088188171, -0.16221174597740173, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6935198903083801, -0.1379498839378357, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5448949933052063, -0.10838662087917328, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.3753301203250885, -0.07465805858373642, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.19134163856506348, -0.03806053474545479, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.19509045779705048, -3.117347660008818e-07, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.3826833665370941, -2.819324436131865e-07, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5555701851844788, -2.819324436131865e-07, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.7071067094802856, -1.850748958531767e-07, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.8314692378044128, -1.4037141227163374e-07, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9238794445991516, -3.191853465978056e-07, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9807848334312439, -9.566792869009078e-08, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9999998211860657, -1.4037141227163374e-07, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9807848334312439, -9.566792869009078e-08, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9238794445991516, -3.191853465978056e-07, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.8314692378044128, -1.4037141227163374e-07, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.7071067094802856, -1.850748958531767e-07, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5555700659751892, -2.59580701822415e-07, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.38268324732780457, -2.5213012122549117e-07, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.19509024918079376, -3.154600562993437e-07, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.1913418471813202, 0.03805994614958763, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.37533020973205566, 0.07465753704309464, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5448950529098511, 0.1083860844373703, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6935198307037354, 0.13794949650764465, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.8154926896095276, 0.16221146285533905, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9061273336410522, 0.18023963272571564, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9619392156600952, 0.19134153425693512, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9807850122451782, 0.1950901597738266, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9619392156600952, 0.19134153425693512, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9061273336410522, 0.18023963272571564, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.8154926896095276, 0.16221146285533905, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6935198307037354, 0.13794949650764465, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5448949337005615, 0.1083860844373703, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.3753300905227661, 0.07465754449367523, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.19134163856506348, 0.03805990144610405, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.18024007976055145, 0.07465756684541702, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.35355332493782043, 0.14644630253314972, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5132798552513123, 0.2126072347164154, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6532813310623169, 0.2705978453159332, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.7681772708892822, 0.3181893527507782, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.853553295135498, 0.35355305671691895, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.906126856803894, 0.37532997131347656, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.9238792061805725, 0.3826832175254822, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.906126856803894, 0.37532997131347656, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.853553295135498, 0.35355305671691895, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.7681772708892822, 0.3181893527507782, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6532813310623169, 0.2705978453159332, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5132797360420227, 0.21260720491409302, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.3535532057285309, 0.14644628763198853, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.18023988604545593, 0.07465748488903046, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.16221177577972412, 0.10838612914085388, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.3181895613670349, 0.21260720491409302, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.46193963289260864, 0.3086579740047455, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5879376530647278, 0.3928472399711609, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.69134122133255, 0.46193939447402954, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.7681776285171509, 0.5132796168327332, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.815492570400238, 0.5448946952819824, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.8314692378044128, 0.5555699467658997, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.815492570400238, 0.5448946952819824, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.7681776285171509, 0.5132796168327332, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.69134122133255, 0.46193939447402954, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5879376530647278, 0.3928472399711609, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.4619395136833191, 0.3086579144001007, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.31818944215774536, 0.21260716021060944, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.162211611866951, 0.10838600248098373, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.13794976472854614, 0.13794946670532227, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.2705979347229004, 0.2705976963043213, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.39284732937812805, 0.3928471505641937, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.49999985098838806, 0.4999997317790985, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5879372954368591, 0.5879373550415039, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6532813906669617, 0.6532810926437378, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6935193538665771, 0.6935193538665771, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.707106351852417, 0.7071064114570618, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6935193538665771, 0.6935193538665771, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.6532813906669617, 0.6532810926437378, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5879372954368591, 0.5879373550415039, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.49999985098838806, 0.4999997317790985, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.3928472399711609, 0.39284706115722656, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.2705978751182556, 0.2705976366996765, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.1379496306180954, 0.13794931769371033, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.10838642716407776, 0.16221146285533905, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.21260741353034973, 0.31818926334381104, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.3086581230163574, 0.46193939447402954, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.39284729957580566, 0.5879374742507935, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.4619393050670624, 0.6913411617279053, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5132798552513123, 0.768177330493927, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5448945760726929, 0.8154924511909485, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5555698275566101, 0.8314691185951233, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5448945760726929, 0.8154924511909485, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.5132798552513123, 0.768177330493927, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.4619393050670624, 0.6913411617279053, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.39284729957580566, 0.5879374742507935, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.30865806341171265, 0.4619393050670624, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.21260736882686615, 0.31818920373916626, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.1083863228559494, 0.16221129894256592, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.0746578574180603, 0.18023976683616638, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.14644651114940643, 0.35355299711227417, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.21260738372802734, 0.5132795572280884, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.2705978751182556, 0.6532811522483826, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.31818920373916626, 0.7681770920753479, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.35355329513549805, 0.8535529375076294, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.37532979249954224, 0.9061266183853149, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.38268303871154785, 0.9238789081573486, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.37532979249954224, 0.9061266183853149, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.35355329513549805, 0.8535529375076294, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.31818920373916626, 0.7681770920753479, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.2705978751182556, 0.6532811522483826, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.21260732412338257, 0.5132794380187988, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.14644648134708405, 0.3535529375076294, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.07465779036283493, 0.18023957312107086, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.038060225546360016, 0.19134151935577393, 0.9807852506637573),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.07465773820877075, 0.375329852104187, 0.9238795042037964),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.10838624089956284, 0.5448946356773376, 0.8314695954322815),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.13794952630996704, 0.6935195326805115, 0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.1622113138437271, 0.8154923915863037, 0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.18023987114429474, 0.9061269760131836, 0.3826834261417389),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.1913413405418396, 0.9619388580322266, 0.19509035348892212),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.19508998095989227, 0.98078453540802, 7.549790126404332e-08),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.1913413405418396, 0.9619388580322266, -0.19509020447731018),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.18023987114429474, 0.9061269760131836, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.1622113138437271, 0.8154923915863037, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.13794952630996704, 0.6935195326805115, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.10838620364665985, 0.5448945164680481, -0.8314696550369263),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.07465772330760956, 0.37532979249954224, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(-0.038060203194618225, 0.1913413256406784, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
vec3(6.356849979738399e-08, 0.9238790273666382, -0.38268327713012695),		vec3(0.0f, 0.5f, 1.0f),
vec3(2.7218476361667854e-07, 0.8314687609672546, -0.5555701851844788),		vec3(0.0f, 0.5f, 1.0f),
vec3(1.529754740658973e-07, 0.707106351852417, -0.7071067690849304),		vec3(0.0f, 0.5f, 1.0f),
vec3(7.846966099123165e-08, 0.3826829195022583, -0.9238796234130859),		vec3(0.0f, 0.5f, 1.0f),
vec3(1.513972591737911e-08, 0.1950899213552475, -0.9807853102684021),		vec3(0.0f, 0.5f, 1.0f),
    };
// Create a vertex array
    int indices[] =  {
        2, 13, 3, 478, 21, 479,
            3, 14, 4, 479, 22, 9,
            4, 15, 5, 9, 23, 480,
            5, 16, 6, 480, 24, 481,
            6, 17, 7, 0, 296, 10,
            205, 481, 24, 7, 18, 8,
            0, 11, 1, 8, 19, 477,
            2, 11, 12, 477, 20, 478,
            11, 27, 12, 19, 35, 20,
            12, 28, 13, 21, 35, 36,
            13, 29, 14, 21, 37, 22,
            14, 30, 15, 22, 38, 23,
            15, 31, 16, 23, 39, 24,
            16, 32, 17, 10, 296, 25,
            205, 24, 39, 18, 32, 33,
            10, 26, 11, 19, 33, 34,
            31, 45, 46, 38, 54, 39,
            31, 47, 32, 25, 296, 40,
            205, 39, 54, 32, 48, 33,
            25, 41, 26, 33, 49, 34,
            26, 42, 27, 35, 49, 50,
            27, 43, 28, 36, 50, 51,
            28, 44, 29, 36, 52, 37,
            29, 45, 30, 37, 53, 38,
            50, 64, 65, 42, 58, 43,
            50, 66, 51, 43, 59, 44,
            51, 67, 52, 44, 60, 45,
            52, 68, 53, 45, 61, 46,
            53, 69, 54, 47, 61, 62,
            40, 296, 55, 205, 54, 69,
            47, 63, 48, 40, 56, 41,
            48, 64, 49, 41, 57, 42,
            68, 84, 69, 62, 76, 77,
            55, 296, 70, 205, 69, 84,
            62, 78, 63, 55, 71, 56,
            63, 79, 64, 56, 72, 57,
            65, 79, 80, 57, 73, 58,
            65, 81, 66, 59, 73, 74,
            67, 81, 82, 59, 75, 60,
            68, 82, 83, 60, 76, 61,
            72, 88, 73, 81, 95, 96,
            74, 88, 89, 81, 97, 82,
            74, 90, 75, 83, 97, 98,
            76, 90, 91, 83, 99, 84,
            76, 92, 77, 70, 296, 85,
            205, 84, 99, 77, 93, 78,
            70, 86, 71, 78, 94, 79,
            71, 87, 72, 80, 94, 95,
            91, 107, 92, 85, 296, 100,
            205, 99, 114, 92, 108, 93,
            85, 101, 86, 93, 109, 94,
            86, 102, 87, 95, 109, 110,
            88, 102, 103, 96, 110, 111,
            88, 104, 89, 96, 112, 97,
            89, 105, 90, 97, 113, 98,
            91, 105, 106, 99, 113, 114,
            110, 126, 111, 103, 119, 104,
            112, 126, 127, 104, 120, 105,
            113, 127, 128, 106, 120, 121,
            114, 128, 129, 106, 122, 107,
            100, 296, 115, 205, 114, 129,
            108, 122, 123, 100, 116, 101,
            108, 124, 109, 101, 117, 102,
            110, 124, 125, 102, 118, 103,
            205, 129, 144, 122, 138, 123,
            116, 130, 131, 123, 139, 124,
            116, 132, 117, 125, 139, 140,
            117, 133, 118, 125, 141, 126,
            119, 133, 134, 127, 141, 142,
            119, 135, 120, 127, 143, 128,
            121, 135, 136, 129, 143, 144,
            121, 137, 122, 115, 296, 130,
            141, 157, 142, 134, 150, 135,
            143, 157, 158, 136, 150, 151,
            143, 159, 144, 136, 152, 137,
            130, 296, 145, 205, 144, 159,
            137, 153, 138, 130, 146, 131,
            138, 154, 139, 132, 146, 147,
            140, 154, 155, 132, 148, 133,
            140, 156, 141, 133, 149, 134,
            145, 161, 146, 153, 169, 154,
            146, 162, 147, 155, 169, 170,
            147, 163, 148, 155, 171, 156,
            149, 163, 164, 157, 171, 172,
            149, 165, 150, 157, 173, 158,
            151, 165, 166, 158, 174, 159,
            151, 167, 152, 145, 296, 160,
            205, 159, 174, 153, 167, 168,
            164, 180, 165, 172, 188, 173,
            166, 180, 181, 174, 188, 189,
            166, 182, 167, 160, 296, 175,
            205, 174, 189, 167, 183, 168,
            160, 176, 161, 168, 184, 169,
            161, 177, 162, 169, 185, 170,
            162, 178, 163, 170, 186, 171,
            163, 179, 164, 172, 186, 187,
            183, 199, 184, 176, 192, 177,
            185, 199, 200, 178, 192, 193,
            185, 201, 186, 179, 193, 194,
            187, 201, 202, 179, 195, 180,
            187, 203, 188, 181, 195, 196,
            189, 203, 204, 181, 197, 182,
            175, 296, 190, 205, 189, 204,
            183, 197, 198, 175, 191, 176,
            202, 219, 203, 196, 211, 212,
            203, 220, 204, 196, 213, 197,
            190, 296, 206, 205, 204, 220,
            197, 214, 198, 190, 207, 191,
            198, 215, 199, 192, 207, 208,
            200, 215, 216, 192, 209, 193,
            200, 217, 201, 193, 210, 194,
            202, 217, 218, 194, 211, 195,
            207, 223, 208, 216, 230, 231,
            208, 224, 209, 216, 232, 217,
            209, 225, 210, 217, 233, 218,
            210, 226, 211, 218, 234, 219,
            212, 226, 227, 220, 234, 235,
            212, 228, 213, 206, 296, 221,
            205, 220, 235, 213, 229, 214,
            206, 222, 207, 214, 230, 215,
            227, 241, 242, 235, 249, 250,
            227, 243, 228, 221, 296, 236,
            205, 235, 250, 228, 244, 229,
            221, 237, 222, 229, 245, 230,
            223, 237, 238, 231, 245, 246,
            224, 238, 239, 231, 247, 232,
            224, 240, 225, 233, 247, 248,
            225, 241, 226, 233, 249, 234,
            246, 260, 261, 239, 253, 254,
            246, 262, 247, 240, 254, 255,
            247, 263, 248, 240, 256, 241,
            248, 264, 249, 242, 256, 257,
            249, 265, 250, 242, 258, 243,
            236, 296, 251, 205, 250, 265,
            243, 259, 244, 236, 252, 237,
            244, 260, 245, 237, 253, 238,
            265, 279, 280, 257, 273, 258,
            251, 296, 266, 205, 265, 280,
            259, 273, 274, 251, 267, 252,
            259, 275, 260, 252, 268, 253,
            261, 275, 276, 254, 268, 269,
            261, 277, 262, 255, 269, 270,
            262, 278, 263, 255, 271, 256,
            264, 278, 279, 257, 271, 272,
            276, 292, 277, 270, 284, 285,
            278, 292, 293, 270, 286, 271,
            278, 294, 279, 272, 286, 287,
            280, 294, 295, 272, 288, 273,
            266, 296, 281, 205, 280, 295,
            273, 289, 274, 266, 282, 267,
            274, 290, 275, 267, 283, 268,
            276, 290, 291, 268, 284, 269,
            281, 296, 297, 205, 295, 311,
            288, 305, 289, 281, 298, 282,
            289, 306, 290, 282, 299, 283,
            291, 306, 307, 284, 299, 300,
            291, 308, 292, 285, 300, 301,
            292, 309, 293, 285, 302, 286,
            293, 310, 294, 287, 302, 303,
            294, 311, 295, 288, 303, 304,
            301, 315, 316, 308, 324, 309,
            301, 317, 302, 310, 324, 325,
            303, 317, 318, 310, 326, 311,
            303, 319, 304, 297, 296, 312,
            205, 311, 326, 304, 320, 305,
            297, 313, 298, 305, 321, 306,
            298, 314, 299, 307, 321, 322,
            300, 314, 315, 307, 323, 308,
            319, 335, 320, 312, 328, 313,
            320, 336, 321, 313, 329, 314,
            322, 336, 337, 315, 329, 330,
            323, 337, 338, 316, 330, 331,
            323, 339, 324, 316, 332, 317,
            325, 339, 340, 318, 332, 333,
            326, 340, 341, 318, 334, 319,
            312, 296, 327, 205, 326, 341,
            338, 354, 339, 331, 347, 332,
            340, 354, 355, 333, 347, 348,
            340, 356, 341, 333, 349, 334,
            327, 296, 342, 205, 341, 356,
            334, 350, 335, 328, 342, 343,
            335, 351, 336, 328, 344, 329,
            337, 351, 352, 330, 344, 345,
            337, 353, 338, 331, 345, 346,
            343, 357, 358, 350, 366, 351,
            343, 359, 344, 352, 366, 367,
            345, 359, 360, 352, 368, 353,
            345, 361, 346, 354, 368, 369,
            346, 362, 347, 355, 369, 370,
            348, 362, 363, 355, 371, 356,
            348, 364, 349, 342, 296, 357,
            205, 356, 371, 350, 364, 365,
            361, 377, 362, 370, 384, 385,
            363, 377, 378, 370, 386, 371,
            363, 379, 364, 357, 296, 372,
            205, 371, 386, 365, 379, 380,
            358, 372, 373, 365, 381, 366,
            358, 374, 359, 367, 381, 382,
            360, 374, 375, 367, 383, 368,
            361, 375, 376, 368, 384, 369,
            380, 396, 381, 373, 389, 374,
            382, 396, 397, 375, 389, 390,
            382, 398, 383, 375, 391, 376,
            383, 399, 384, 376, 392, 377,
            385, 399, 400, 378, 392, 393,
            385, 401, 386, 378, 394, 379,
            372, 296, 387, 205, 386, 401,
            379, 395, 380, 372, 388, 373,
            400, 414, 415, 393, 407, 408,
            400, 416, 401, 393, 409, 394,
            387, 296, 402, 205, 401, 416,
            395, 409, 410, 387, 403, 388,
            395, 411, 396, 389, 403, 404,
            397, 411, 412, 390, 404, 405,
            397, 413, 398, 391, 405, 406,
            398, 414, 399, 391, 407, 392,
            412, 426, 427, 404, 420, 405,
            412, 428, 413, 406, 420, 421,
            413, 429, 414, 406, 422, 407,
            414, 430, 415, 408, 422, 423,
            415, 431, 416, 408, 424, 409,
            402, 296, 417, 205, 416, 431,
            410, 424, 425, 402, 418, 403,
            410, 426, 411, 403, 419, 404,
            430, 446, 431, 424, 438, 439,
            417, 296, 432, 205, 431, 446,
            424, 440, 425, 417, 433, 418,
            425, 441, 426, 418, 434, 419,
            427, 441, 442, 419, 435, 420,
            427, 443, 428, 421, 435, 436,
            429, 443, 444, 421, 437, 422,
            429, 445, 430, 423, 437, 438,
            435, 449, 450, 442, 458, 443,
            436, 450, 451, 443, 459, 444,
            436, 452, 437, 444, 460, 445,
            438, 452, 453, 445, 461, 446,
            438, 454, 439, 432, 296, 447,
            205, 446, 461, 439, 455, 440,
            433, 447, 448, 440, 456, 441,
            434, 448, 449, 442, 456, 457,
            453, 469, 454, 447, 296, 462,
            205, 461, 476, 454, 470, 455,
            447, 463, 448, 455, 471, 456,
            448, 464, 449, 457, 471, 472,
            449, 465, 450, 457, 473, 458,
            451, 465, 466, 458, 474, 459,
            451, 467, 452, 459, 475, 460,
            453, 467, 468, 461, 475, 476,
            472, 479, 473, 466, 3, 4,
            473, 9, 474, 467, 4, 5,
            474, 480, 475, 468, 5, 6,
            475, 481, 476, 469, 6, 7,
            462, 296, 0, 205, 476, 481,
            469, 8, 470, 463, 0, 1,
            470, 477, 471, 464, 1, 2,
            472, 477, 478, 465, 2, 3,
            2, 12, 13, 478, 20, 21,
            3, 13, 14, 479, 21, 22,
            4, 14, 15, 9, 22, 23,
            5, 15, 16, 480, 23, 24,
            6, 16, 17, 7, 17, 18,
            0, 10, 11, 8, 18, 19,
            2, 1, 11, 477, 19, 20,
            11, 26, 27, 19, 34, 35,
            12, 27, 28, 21, 20, 35,
            13, 28, 29, 21, 36, 37,
            14, 29, 30, 22, 37, 38,
            15, 30, 31, 23, 38, 39,
            16, 31, 32, 18, 17, 32,
            10, 25, 26, 19, 18, 33,
            31, 30, 45, 38, 53, 54,
            31, 46, 47, 32, 47, 48,
            25, 40, 41, 33, 48, 49,
            26, 41, 42, 35, 34, 49,
            27, 42, 43, 36, 35, 50,
            28, 43, 44, 36, 51, 52,
            29, 44, 45, 37, 52, 53,
            50, 49, 64, 42, 57, 58,
            50, 65, 66, 43, 58, 59,
            51, 66, 67, 44, 59, 60,
            52, 67, 68, 45, 60, 61,
            53, 68, 69, 47, 46, 61,
            47, 62, 63, 40, 55, 56,
            48, 63, 64, 41, 56, 57,
            68, 83, 84, 62, 61, 76,
            62, 77, 78, 55, 70, 71,
            63, 78, 79, 56, 71, 72,
            65, 64, 79, 57, 72, 73,
            65, 80, 81, 59, 58, 73,
            67, 66, 81, 59, 74, 75,
            68, 67, 82, 60, 75, 76,
            72, 87, 88, 81, 80, 95,
            74, 73, 88, 81, 96, 97,
            74, 89, 90, 83, 82, 97,
            76, 75, 90, 83, 98, 99,
            76, 91, 92, 77, 92, 93,
            70, 85, 86, 78, 93, 94,
            71, 86, 87, 80, 79, 94,
            91, 106, 107, 92, 107, 108,
            85, 100, 101, 93, 108, 109,
            86, 101, 102, 95, 94, 109,
            88, 87, 102, 96, 95, 110,
            88, 103, 104, 96, 111, 112,
            89, 104, 105, 97, 112, 113,
            91, 90, 105, 99, 98, 113,
            110, 125, 126, 103, 118, 119,
            112, 111, 126, 104, 119, 120,
            113, 112, 127, 106, 105, 120,
            114, 113, 128, 106, 121, 122,
            108, 107, 122, 100, 115, 116,
            108, 123, 124, 101, 116, 117,
            110, 109, 124, 102, 117, 118,
            122, 137, 138, 116, 115, 130,
            123, 138, 139, 116, 131, 132,
            125, 124, 139, 117, 132, 133,
            125, 140, 141, 119, 118, 133,
            127, 126, 141, 119, 134, 135,
            127, 142, 143, 121, 120, 135,
            129, 128, 143, 121, 136, 137,
            141, 156, 157, 134, 149, 150,
            143, 142, 157, 136, 135, 150,
            143, 158, 159, 136, 151, 152,
            137, 152, 153, 130, 145, 146,
            138, 153, 154, 132, 131, 146,
            140, 139, 154, 132, 147, 148,
            140, 155, 156, 133, 148, 149,
            145, 160, 161, 153, 168, 169,
            146, 161, 162, 155, 154, 169,
            147, 162, 163, 155, 170, 171,
            149, 148, 163, 157, 156, 171,
            149, 164, 165, 157, 172, 173,
            151, 150, 165, 158, 173, 174,
            151, 166, 167, 153, 152, 167,
            164, 179, 180, 172, 187, 188,
            166, 165, 180, 174, 173, 188,
            166, 181, 182, 167, 182, 183,
            160, 175, 176, 168, 183, 184,
            161, 176, 177, 169, 184, 185,
            162, 177, 178, 170, 185, 186,
            163, 178, 179, 172, 171, 186,
            183, 198, 199, 176, 191, 192,
            185, 184, 199, 178, 177, 192,
            185, 200, 201, 179, 178, 193,
            187, 186, 201, 179, 194, 195,
            187, 202, 203, 181, 180, 195,
            189, 188, 203, 181, 196, 197,
            183, 182, 197, 175, 190, 191,
            202, 218, 219, 196, 195, 211,
            203, 219, 220, 196, 212, 213,
            197, 213, 214, 190, 206, 207,
            198, 214, 215, 192, 191, 207,
            200, 199, 215, 192, 208, 209,
            200, 216, 217, 193, 209, 210,
            202, 201, 217, 194, 210, 211,
            207, 222, 223, 216, 215, 230,
            208, 223, 224, 216, 231, 232,
            209, 224, 225, 217, 232, 233,
            210, 225, 226, 218, 233, 234,
            212, 211, 226, 220, 219, 234,
            212, 227, 228, 213, 228, 229,
            206, 221, 222, 214, 229, 230,
            227, 226, 241, 235, 234, 249,
            227, 242, 243, 228, 243, 244,
            221, 236, 237, 229, 244, 245,
            223, 222, 237, 231, 230, 245,
            224, 223, 238, 231, 246, 247,
            224, 239, 240, 233, 232, 247,
            225, 240, 241, 233, 248, 249,
            246, 245, 260, 239, 238, 253,
            246, 261, 262, 240, 239, 254,
            247, 262, 263, 240, 255, 256,
            248, 263, 264, 242, 241, 256,
            249, 264, 265, 242, 257, 258,
            243, 258, 259, 236, 251, 252,
            244, 259, 260, 237, 252, 253,
            265, 264, 279, 257, 272, 273,
            259, 258, 273, 251, 266, 267,
            259, 274, 275, 252, 267, 268,
            261, 260, 275, 254, 253, 268,
            261, 276, 277, 255, 254, 269,
            262, 277, 278, 255, 270, 271,
            264, 263, 278, 257, 256, 271,
            276, 291, 292, 270, 269, 284,
            278, 277, 292, 270, 285, 286,
            278, 293, 294, 272, 271, 286,
            280, 279, 294, 272, 287, 288,
            273, 288, 289, 266, 281, 282,
            274, 289, 290, 267, 282, 283,
            276, 275, 290, 268, 283, 284,
            288, 304, 305, 281, 297, 298,
            289, 305, 306, 282, 298, 299,
            291, 290, 306, 284, 283, 299,
            291, 307, 308, 285, 284, 300,
            292, 308, 309, 285, 301, 302,
            293, 309, 310, 287, 286, 302,
            294, 310, 311, 288, 287, 303,
            301, 300, 315, 308, 323, 324,
            301, 316, 317, 310, 309, 324,
            303, 302, 317, 310, 325, 326,
            303, 318, 319, 304, 319, 320,
            297, 312, 313, 305, 320, 321,
            298, 313, 314, 307, 306, 321,
            300, 299, 314, 307, 322, 323,
            319, 334, 335, 312, 327, 328,
            320, 335, 336, 313, 328, 329,
            322, 321, 336, 315, 314, 329,
            323, 322, 337, 316, 315, 330,
            323, 338, 339, 316, 331, 332,
            325, 324, 339, 318, 317, 332,
            326, 325, 340, 318, 333, 334,
            338, 353, 354, 331, 346, 347,
            340, 339, 354, 333, 332, 347,
            340, 355, 356, 333, 348, 349,
            334, 349, 350, 328, 327, 342,
            335, 350, 351, 328, 343, 344,
            337, 336, 351, 330, 329, 344,
            337, 352, 353, 331, 330, 345,
            343, 342, 357, 350, 365, 366,
            343, 358, 359, 352, 351, 366,
            345, 344, 359, 352, 367, 368,
            345, 360, 361, 354, 353, 368,
            346, 361, 362, 355, 354, 369,
            348, 347, 362, 355, 370, 371,
            348, 363, 364, 350, 349, 364,
            361, 376, 377, 370, 369, 384,
            363, 362, 377, 370, 385, 386,
            363, 378, 379, 365, 364, 379,
            358, 357, 372, 365, 380, 381,
            358, 373, 374, 367, 366, 381,
            360, 359, 374, 367, 382, 383,
            361, 360, 375, 368, 383, 384,
            380, 395, 396, 373, 388, 389,
            382, 381, 396, 375, 374, 389,
            382, 397, 398, 375, 390, 391,
            383, 398, 399, 376, 391, 392,
            385, 384, 399, 378, 377, 392,
            385, 400, 401, 378, 393, 394,
            379, 394, 395, 372, 387, 388,
            400, 399, 414, 393, 392, 407,
            400, 415, 416, 393, 408, 409,
            395, 394, 409, 387, 402, 403,
            395, 410, 411, 389, 388, 403,
            397, 396, 411, 390, 389, 404,
            397, 412, 413, 391, 390, 405,
            398, 413, 414, 391, 406, 407,
            412, 411, 426, 404, 419, 420,
            412, 427, 428, 406, 405, 420,
            413, 428, 429, 406, 421, 422,
            414, 429, 430, 408, 407, 422,
            415, 430, 431, 408, 423, 424,
            410, 409, 424, 402, 417, 418,
            410, 425, 426, 403, 418, 419,
            430, 445, 446, 424, 423, 438,
            424, 439, 440, 417, 432, 433,
            425, 440, 441, 418, 433, 434,
            427, 426, 441, 419, 434, 435,
            427, 442, 443, 421, 420, 435,
            429, 428, 443, 421, 436, 437,
            429, 444, 445, 423, 422, 437,
            435, 434, 449, 442, 457, 458,
            436, 435, 450, 443, 458, 459,
            436, 451, 452, 444, 459, 460,
            438, 437, 452, 445, 460, 461,
            438, 453, 454, 439, 454, 455,
            433, 432, 447, 440, 455, 456,
            434, 433, 448, 442, 441, 456,
            453, 468, 469, 454, 469, 470,
            447, 462, 463, 455, 470, 471,
            448, 463, 464, 457, 456, 471,
            449, 464, 465, 457, 472, 473,
            451, 450, 465, 458, 473, 474,
            451, 466, 467, 459, 474, 475,
            453, 452, 467, 461, 460, 475,
            472, 478, 479, 466, 465, 3,
            473, 479, 9, 467, 466, 4,
            474, 9, 480, 468, 467, 5,
            475, 480, 481, 469, 468, 6,
            469, 7, 8, 463, 462, 0,
            470, 8, 477, 464, 463, 1,
                472, 471, 477, 465, 464, 2, };
GLuint vertexArrayObject;
glGenVertexArrays(1, &vertexArrayObject);
glBindVertexArray(vertexArrayObject);


// Upload Vertex Buffer to the GPU, keep a reference to it (vertexBufferObject)
GLuint vertexBufferObject;
glGenBuffers(1, &vertexBufferObject);
glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);
glBufferData(GL_ARRAY_BUFFER, sizeof(vertexArray), vertexArray, GL_STATIC_DRAW);


GLuint ebo;
glGenBuffers(1, &ebo);
glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,ebo);
glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(int)*2880, indices, GL_STATIC_DRAW);


glVertexAttribPointer(0,                   // attribute 0 matches aPos in Vertex Shader
    3,                   // size
    GL_FLOAT,            // type
    GL_FALSE,            // normalized?
    2 * sizeof(vec3), // stride - each vertex contain 2 vec3 (position, color)
    (void*)0             // array buffer offset
);
glEnableVertexAttribArray(0);


glVertexAttribPointer(1,                            // attribute 1 matches aColor in Vertex Shader
    3,
    GL_FLOAT,
    GL_FALSE,
    2 * sizeof(vec3),
    (void*)sizeof(vec3)      // color is offseted a vec3 (comes after position)
);
glEnableVertexAttribArray(1);

glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);

glBindVertexArray(0);
return vertexArrayObject;

}
int cubeList::createColorCube() {

    float cubeCoordinates[] = {
     -0.5f,-0.5f,-0.5f,  // triangle 1 : begin
     -0.5f,-0.5f, 0.5f,
     -0.5f, 0.5f, 0.5f, // triangle 1 : end
     0.5f, 0.5f,-0.5f, // triangle 2 : begin
     -0.5f,-0.5f,-0.5f,
     -0.5f, 0.5f,-0.5f, // triangle 2 : end
     0.5f,-0.5f, 0.5f,
     -0.5f,-0.5f,-0.5f,
     0.5f,-0.5f,-0.5f,
     0.5f, 0.5f,-0.5f,
     0.5f,-0.5f,-0.5f,
     -0.5f,-0.5f,-0.5f,
     -0.5f,-0.5f,-0.5f,
     -0.5f, 0.5f, 0.5f,
     -0.5f, 0.5f,-0.5f,
     0.5f,-0.5f, 0.5f,
     -0.5f,-0.5f, 0.5f,
     -0.5f,-0.5f,-0.5f,
     -0.5f, 0.5f, 0.5f,
     -0.5f,-0.5f, 0.5f,
     0.5f,-0.5f, 0.5f,
     0.5f, 0.5f, 0.5f,
     0.5f,-0.5f,-0.5f,
     0.5f, 0.5f,-0.5f,
     0.5f,-0.5f,-0.5f,
     0.5f, 0.5f, 0.5f,
     0.5f,-0.5f, 0.5f,
     0.5f, 0.5f, 0.5f,
     0.5f, 0.5f,-0.5f,
     -0.5f, 0.5f,-0.5f,
     0.5f, 0.5f, 0.5f,
     -0.5f, 0.5f,-0.5f,
     -0.5f, 0.5f, 0.5f,
     0.5f, 0.5f, 0.5f,
     -0.5f, 0.5f, 0.5f,
     0.5f,-0.5f, 0.5f
    }; // Cube Vertices

    float coordinateColours[] = {
        0.583f,  0.771f,  0.014f,
        0.609f,  0.115f,  0.436f,
        0.327f,  0.483f,  0.844f,
        0.822f,  0.569f,  0.201f,
        0.435f,  0.602f,  0.223f,
        0.310f,  0.747f,  0.185f,
        0.597f,  0.770f,  0.761f,
        0.559f,  0.436f,  0.730f,
        0.359f,  0.583f,  0.152f,
        0.483f,  0.596f,  0.789f,
        0.559f,  0.861f,  0.639f,
        0.195f,  0.548f,  0.859f,
        0.014f,  0.184f,  0.576f,
        0.771f,  0.328f,  0.970f,
        0.406f,  0.615f,  0.116f,
        0.676f,  0.977f,  0.133f,
        0.971f,  0.572f,  0.833f,
        0.140f,  0.616f,  0.489f,
        0.997f,  0.513f,  0.064f,
        0.945f,  0.719f,  0.592f,
        0.543f,  0.021f,  0.978f,
        0.279f,  0.317f,  0.505f,
        0.167f,  0.620f,  0.077f,
        0.347f,  0.857f,  0.137f,
        0.055f,  0.953f,  0.042f,
        0.714f,  0.505f,  0.345f,
        0.783f,  0.290f,  0.734f,
        0.722f,  0.645f,  0.174f,
        0.302f,  0.455f,  0.848f,
        0.225f,  0.587f,  0.040f,
        0.517f,  0.713f,  0.338f,
        0.053f,  0.959f,  0.120f,
        0.393f,  0.621f,  0.362f,
        0.673f,  0.211f,  0.457f,
        0.820f,  0.883f,  0.371f,
        0.982f,  0.099f,  0.879f
    };  //Colour for the Vertices


    // Create a vertex array

    GLuint vertexArrayObject;
    glGenVertexArrays(1, &vertexArrayObject);
    glBindVertexArray(vertexArrayObject);


    // Upload Vertex Buffer to the GPU, keep a reference to it (vertexBufferObject)
    GLuint vertexBufferObject;
    glGenBuffers(1, &vertexBufferObject);
    glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);
    glBufferData(GL_ARRAY_BUFFER, sizeof(cubeCoordinates), cubeCoordinates, GL_STATIC_DRAW);

    glVertexAttribPointer(0,                   // attribute 0 matches aPos in Vertex Shader
        3,                   // size
        GL_FLOAT,            // type
        GL_FALSE,            // normalized?
        0, // stride - each vertex contain 2 vec3 (position, color)
        (void*)0             // array buffer offset
    );
    glEnableVertexAttribArray(0);
    GLuint colorBufferObject;
    glGenBuffers(1, &colorBufferObject);
    glBindBuffer(GL_ARRAY_BUFFER, colorBufferObject);
    glBufferData(GL_ARRAY_BUFFER, sizeof(coordinateColours), coordinateColours, GL_STATIC_DRAW);

    glVertexAttribPointer(1,                            // attribute 1 matches aColor in Vertex Shader
        3,
        GL_FLOAT,
        GL_FALSE,
        0,
        (void*)0    // color is offseted a vec3 (comes after position)
    );
    glEnableVertexAttribArray(1);

    glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);

    glBindVertexArray(0);
    return vertexArrayObject;
}

int cubeList::createTexturedCube() {
    float cubeVertices[] = {
             -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,
              0.5f, -0.5f, -0.5f,  1.0f, 0.0f,
              0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
              0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
             -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
             -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,

             -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
              0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
              0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
              0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
             -0.5f,  0.5f,  0.5f,  0.0f, 1.0f,
             -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,

             -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
             -0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
             -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
             -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
             -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
             -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,

              0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
              0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
              0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
              0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
              0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
              0.5f,  0.5f,  0.5f,  1.0f, 0.0f,

             -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
              0.5f, -0.5f, -0.5f,  1.0f, 1.0f,
              0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
              0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
             -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
             -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,

             -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
              0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
              0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
              0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
             -0.5f,  0.5f,  0.5f,  0.0f, 0.0f,
             -0.5f,  0.5f, -0.5f,  0.0f, 1.0f
    };

    GLuint vertexArrayObject;
    glGenVertexArrays(1, &vertexArrayObject);
    glBindVertexArray(vertexArrayObject);


    // Upload Vertex Buffer to the GPU, keep a reference to it (vertexBufferObject)
    GLuint vertexBufferObject;
    glGenBuffers(1, &vertexBufferObject);
    glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);
    glBufferData(GL_ARRAY_BUFFER, sizeof(cubeVertices), cubeVertices, GL_STATIC_DRAW);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0,                   // attribute 0 matches aPos in Vertex Shader
        3,                   // size
        GL_FLOAT,            // type
        GL_FALSE,            // normalized?
        5 * sizeof(float), // stride - each vertex contain 2 vec3 (position, color)
        (void*)0             // array buffer offset
    );

    glEnableVertexAttribArray(1);
    glVertexAttribPointer(1,                            // attribute 1 matches texture1 in fragment Shader
        2,
        GL_FLOAT,
        GL_FALSE,
        5 * sizeof(float),
        (void*)(3 * sizeof(float))
    );



    glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);
    glBindVertexArray(0);

    return vertexArrayObject;
}

//Alexis
void cubeList::alexisCube(cubeNode** root) {
    struct cubeNode* last = *root;
    vec3 allPos;

    for (int i = 0; i < 8; i++) {
        if (last->next != NULL) {
            last = last->next;
        }
        mat4 currentMat = last->ownMat;
        vec3 currentVec = vecArray[i];
        struct cubeNode* newNode = new cubeNode;
        newNode->ownMat = translate(currentMat, currentVec);
        newNode->next = NULL;
        while (last->next != NULL) {
            last = last->next;
        }
        last->next = newNode;

    }
}
void cubeList::updateList(cubeNode** root, mat4 newBase) {

    struct cubeNode* last = *root;
    last->ownMat = newBase;
    struct cubeNode* next = last->next;
    int i = 0;
    while (last->next != NULL) {
        vec3 currentVec;
        mat4 currentMat = last->ownMat;
        if (!shuffling)
            currentVec = vecArray[i];
        else
            currentVec = newVecArray[i];
        next->ownMat = translate(currentMat, currentVec);
        last = last->next;
        next = last->next;
        i++;
    }
}
void cubeList::alexisWall(mat4 originalPos, mat4 wallPos[7]) {
    float walls = 2.5f;
    float thiccness = 0.5f;
    float howFarAway = 9.0f;
    originalPos = translate(originalPos, vec3(0, 0, -howFarAway));
    wallPos[0] = translate(originalPos, vec3(-1, 1, 0));
    wallPos[1] = translate(originalPos, vec3(-1, -1, 0));
    wallPos[2] = translate(originalPos, vec3(1, -1, 0));
    wallPos[3] = translate(originalPos, vec3(walls, 0, 0));
    wallPos[4] = translate(originalPos, vec3(0, walls, 0));
    wallPos[5] = translate(originalPos, vec3(-walls, 0, 0));
    wallPos[6] = translate(originalPos, vec3(0, -walls, 0));


    wallPos[3] = scale(wallPos[3], vec3(2, 3, thiccness));
    wallPos[4] = scale(wallPos[4], vec3(7, 2, thiccness));
    wallPos[5] = scale(wallPos[5], vec3(2, 3, thiccness));
    wallPos[6] = scale(wallPos[6], vec3(7, 2, thiccness));

    wallPos[0] = scale(wallPos[0], vec3(1, 1, thiccness));
    wallPos[1] = scale(wallPos[1], vec3(1, 1, thiccness));
    wallPos[2] = scale(wallPos[2], vec3(1, 1, thiccness));



}
void cubeList::alexisShuffle() {
    //basically only translate on a specific axis by 1 or 2
    for (int i = 0; i < 8; i++) {

        int zTranslateNormal = linearRand(-1, 1);

        newVecArray[i] = vecArray[i];
        newVecArray[i].z = zTranslateNormal;
    }
}
void cubeList::toggleShuffle() {
    shuffling = !shuffling;
}
//Jay
void cubeList::jayCube(mat4 allPos[9], mat4 originalPos) {

    allPos[0] = originalPos;
    if (!jayShuffling) {


        for (int i = 1; i < 9; i++) {
            switch (i) {
            case 1:
                allPos[i] = translate(allPos[i - 1], vecJayArray[i - 1]);
                break;
            case 2:
                allPos[i] = translate(allPos[i - 1], vecJayArray[i - 1]);
                break;
            case 3:
                allPos[i] = translate(allPos[i - 1], vecJayArray[i - 1]);
                break;
            case 4:
                allPos[i] = translate(allPos[i - 1], vecJayArray[i - 1]);
                break;
            case 5:
                allPos[i] = translate(allPos[i - 1], vecJayArray[i - 1]);
                break;
            case 6:
                allPos[i] = translate(allPos[i - 1], vecJayArray[i - 1]);
                break;
            case 7:
                allPos[i] = translate(allPos[i - 1], vecJayArray[i - 1]);
                break;
            case 8:
                allPos[i] = translate(allPos[i - 1], vecJayArray[i - 1]);
                break;
            }
        }
    }
    else
    {
        for (int i = 1; i < 9; i++) {
            switch (i) {
            case 1:
                allPos[i] = translate(allPos[i - 1], vecNewJayArray[i - 1]);
                break;
            case 2:
                allPos[i] = translate(allPos[i - 1], vecNewJayArray[i - 1]);
                break;
            case 3:
                allPos[i] = translate(allPos[i - 1], vecNewJayArray[i - 1]);
                break;
            case 4:
                allPos[i] = translate(allPos[i - 1], vecNewJayArray[i - 1]);
                break;
            case 5:
                allPos[i] = translate(allPos[i - 1], vecNewJayArray[i - 1]);
                break;
            case 6:
                allPos[i] = translate(allPos[i - 1], vecNewJayArray[i - 1]);
                break;
            case 7:
                allPos[i] = translate(allPos[i - 1], vecNewJayArray[i - 1]);
                break;
            case 8:
                allPos[i] = translate(allPos[i - 1], vecNewJayArray[i - 1]);
                break;
            }
        }
    }
}
void cubeList::jayWall(mat4 originalPos, mat4 wallPos[7]) {
    float walls = 2.5f;
    float thiccness = 0.5f;
    float howFarAway = 9.0f;
    originalPos = translate(originalPos, vec3(0, 1, -howFarAway));
    wallPos[0] = translate(originalPos, vec3(1, 1, 0));
    wallPos[1] = translate(originalPos, vec3(-1, -1, 0));
    wallPos[2] = translate(originalPos, vec3(1, 0, 0));
    wallPos[0] = scale(wallPos[0], vec3(1, 1, thiccness));
    wallPos[1] = scale(wallPos[1], vec3(1, 1, thiccness));
    wallPos[2] = scale(wallPos[2], vec3(1, 1, thiccness));
    wallPos[3] = translate(originalPos, vec3(walls, 0, 0));
    wallPos[4] = translate(originalPos, vec3(0, walls, 0));
    wallPos[5] = translate(originalPos, vec3(-walls, 0, 0));
    wallPos[6] = translate(originalPos, vec3(0, -walls, 0));
    wallPos[3] = scale(wallPos[3], vec3(2, 3, thiccness));
    wallPos[4] = scale(wallPos[4], vec3(7, 2, thiccness));
    wallPos[5] = scale(wallPos[5], vec3(2, 3, thiccness));
    wallPos[6] = scale(wallPos[6], vec3(7, 2, thiccness));
}
void cubeList::toggleShuffleJay() {
    jayShuffling = !jayShuffling;
}
void cubeList::jayShuffle() {
    for (int i = 0; i < 8; i++) {

        int zTranslateNormal = linearRand(-1, 1);

        vecNewJayArray[i] = vecJayArray[i];
        vecNewJayArray[i].z = zTranslateNormal;
    }
}
//james
void cubeList::jamesCube(cubeNode** root) {
    struct cubeNode* last = *root;
    vec3 allPos;

    for (int i = 0; i < 8; i++) {
        if (last->next != NULL) {
            last = last->next;
        }
        mat4 currentMat = last->ownMat;
        vec3 currentVec = jamesVecArray[i];
        struct cubeNode* newNode = new cubeNode;
        newNode->ownMat = translate(currentMat, currentVec);
        newNode->next = NULL;
        while (last->next != NULL) {
            last = last->next;
        }
        last->next = newNode;
    }
}
void cubeList::jamesUpdateList(cubeNode** root, mat4 newBase) {
    struct cubeNode* last = *root;
    last->ownMat = newBase;
    struct cubeNode* next = last->next;
    int i = 0;
    while (last->next != NULL) {
        vec3 currentVec;
        mat4 currentMat = last->ownMat;
        if (!jamesShuffling)
            currentVec = jamesVecArray[i];
        else
            currentVec = jamesNewVecArray[i];
        next->ownMat = translate(currentMat, currentVec);
        last = last->next;
        next = last->next;
        i++;
    }
}
void cubeList::toggleShuffleJames() {
    jamesShuffling = !jamesShuffling;
}
void cubeList::jamesWall(mat4 originalPos, mat4 wallPos[22]) {
    float walls = 2.5f;
    float thiccness = 0.5f;
    float howFarAway = 9.0f;
    originalPos = translate(originalPos, vec3(0, 0, -howFarAway));

    wallPos[0] = translate(originalPos, vec3(0, 1, 0));
    wallPos[1] = translate(originalPos, vec3(0, 2, 0));
    wallPos[2] = translate(originalPos, vec3(0, 3, 0));
    wallPos[3] = translate(originalPos, vec3(1, 3, 0));
    wallPos[4] = translate(originalPos, vec3(2, 3, 0));
    wallPos[5] = translate(originalPos, vec3(3, 3, 0));
    wallPos[6] = translate(originalPos, vec3(4, 3, 0));
    wallPos[7] = translate(originalPos, vec3(4, 2, 0));
    wallPos[8] = translate(originalPos, vec3(4, 1, 0));
    wallPos[9] = translate(originalPos, vec3(4, 0, 0));
    wallPos[10] = translate(originalPos, vec3(3, 0, 0));
    wallPos[11] = translate(originalPos, vec3(2, 0, 0));
    wallPos[12] = translate(originalPos, vec3(2, -1, 0));
    wallPos[13] = translate(originalPos, vec3(1, -1, 0));
    wallPos[14] = translate(originalPos, vec3(0, -1, 0));
    wallPos[15] = translate(originalPos, vec3(-1, -1, 0));
    wallPos[16] = translate(originalPos, vec3(-1, 0, 0));
    wallPos[17] = translate(originalPos, vec3(-1, 1, 0));
    wallPos[18] = translate(originalPos, vec3(3, -1, 0));
    wallPos[19] = translate(originalPos, vec3(4, -1, 0));
    wallPos[20] = translate(originalPos, vec3(-1, 2, 0));
    wallPos[21] = translate(originalPos, vec3(-1, 3, 0));

}
void cubeList::jamesShuffle() {
    //basically only translate on a specific axis by 1 or 2
    for (int i = 0; i < 8; i++) {

        int zTranslateNormal = linearRand(-1, 1);

        jamesNewVecArray[i] = jamesVecArray[i];
        jamesNewVecArray[i].z = zTranslateNormal;
    }
}
//Mohamed
void cubeList::moCube(mat4 allPos[9], mat4 originalPos) {

    allPos[0] = originalPos;
    if (!moShuffling) {


        for (int i = 1; i < 9; i++) {
            switch (i) {
            case 1:
                allPos[i] = translate(allPos[i - 1], vecMoArray[i - 1]);
                break;
            case 2:
                allPos[i] = translate(allPos[i - 1], vecMoArray[i - 1]);
                break;
            case 3:
                allPos[i] = translate(allPos[i - 1], vecMoArray[i - 1]);
                break;
            case 4:
                allPos[i] = translate(allPos[i - 1], vecMoArray[i - 1]);
                break;
            case 5:
                allPos[i] = translate(allPos[i - 1], vecMoArray[i - 1]);
                break;
            case 6:
                allPos[i] = translate(allPos[i - 1], vecMoArray[i - 1]);
                break;
            case 7:
                allPos[i] = translate(allPos[i - 1], vecMoArray[i - 1]);
                break;
            case 8:
                allPos[i] = translate(allPos[i - 1], vecMoArray[i - 1]);
                break;
            }
        }
    }
    else
    {
        for (int i = 1; i < 9; i++) {
            switch (i) {
            case 1:
                allPos[i] = translate(allPos[i - 1], vecNewMoArray[i - 1]);
                break;
            case 2:
                allPos[i] = translate(allPos[i - 1], vecNewMoArray[i - 1]);
                break;
            case 3:
                allPos[i] = translate(allPos[i - 1], vecNewMoArray[i - 1]);
                break;
            case 4:
                allPos[i] = translate(allPos[i - 1], vecNewMoArray[i - 1]);
                break;
            case 5:
                allPos[i] = translate(allPos[i - 1], vecNewMoArray[i - 1]);
                break;
            case 6:
                allPos[i] = translate(allPos[i - 1], vecNewMoArray[i - 1]);
                break;
            case 7:
                allPos[i] = translate(allPos[i - 1], vecNewMoArray[i - 1]);
                break;
            case 8:
                allPos[i] = translate(allPos[i - 1], vecNewMoArray[i - 1]);
                break;
            }
        }
    }
}
void cubeList::moWall(mat4 originalPos, mat4 wallPos[7]) {
    float walls = 2.5f;
    float thiccness = 0.5f;
    float howFarAway = 9.0f;
    originalPos = translate(originalPos, vec3(-1, 1, -howFarAway));
    wallPos[0] = translate(originalPos, vec3(1, 1, 0));
    wallPos[1] = translate(originalPos, vec3(-1, -1, 0));
    wallPos[2] = translate(originalPos, vec3(1, 0, 0));
    wallPos[0] = scale(wallPos[0], vec3(1, 1, thiccness));
    wallPos[1] = scale(wallPos[1], vec3(1, 1, thiccness));
    wallPos[2] = scale(wallPos[2], vec3(1, 1, thiccness));
    wallPos[3] = translate(originalPos, vec3(walls, 0, 0));
    wallPos[4] = translate(originalPos, vec3(0, walls, 0));
    wallPos[5] = translate(originalPos, vec3(-walls, 0, 0));
    wallPos[6] = translate(originalPos, vec3(0, -walls, 0));
    wallPos[3] = scale(wallPos[3], vec3(2, 3, thiccness));
    wallPos[4] = scale(wallPos[4], vec3(7, 2, thiccness));
    wallPos[5] = scale(wallPos[5], vec3(2, 3, thiccness));
    wallPos[6] = scale(wallPos[6], vec3(7, 2, thiccness));
}
void cubeList::moShuffle() {
    for (int i = 0; i < 8; i++) {

        int zTranslateNormal = linearRand(-1, 1);

        vecNewMoArray[i] = vecMoArray[i];
        vecNewMoArray[i].z = zTranslateNormal;
    }
}
void cubeList::toggleShuffleMo() {
    moShuffling = !moShuffling;
}

void cubeList::drawAkhiCube(mat4 model_Matrix, Shader shaderProgram, int drawMode, std::string matName)
{
    vec3 vecUsed;
    for (int i = -1; i < 8; i++) {

        if (!akhiShuffling) {
            vecUsed = cubePositionsAkhi[i];
        }
        else
        {
            vecUsed = cubePositionsAkhiShuffled[i];
        }
        model_Matrix = glm::translate(model_Matrix, vecUsed);

        shaderProgram.setMat4(matName.c_str(), (model_Matrix));

        glDrawArrays(drawMode, 0, 6 * 2 * 3);
    }
}

void cubeList::akhiToggleShuffle()
{
    akhiShuffling = !akhiShuffling;
}

void cubeList::akhiShuffle() {
    std::vector<glm::vec3> takenCoordinates;
    glm::vec3 objectCoordinate = glm::vec3(0.0f, 0.0f, 0.0f);
    glm::vec3 newCoordinate;
    bool noCollision;
    cubePositionsAkhiShuffled[0] = cubePositionsAkhi[0];
    for (int i = 1; i < 9; i++) {
        noCollision = false;

        while (!noCollision)
        {
            int zTranslateNormal = linearRand(-1, 1);
            newCoordinate = cubePositionsAkhi[i];
            newCoordinate.z = zTranslateNormal;

            if (!(std::find(takenCoordinates.begin(), takenCoordinates.end(), (newCoordinate + objectCoordinate)) != takenCoordinates.end()))
            {
                noCollision = true;
                takenCoordinates.push_back(objectCoordinate + newCoordinate);
                objectCoordinate += newCoordinate;
                cubePositionsAkhiShuffled[i] = newCoordinate;

            }
        }
    }
}

void cubeList::drawPabloCube(mat4 model_Matrix, Shader shaderProgram, int drawMode, std::string matName)
{

    vec3 vecUsed;
    for (int i = 0; i < 9; i++) {



        if (!pabloShuffling) {
            vecUsed = cubePositionsPablo[i];
        }
        else
            vecUsed = cubePositionsPabloShuffled[i];
        model_Matrix = glm::translate(model_Matrix, vecUsed);
        shaderProgram.setMat4(matName.c_str(), (model_Matrix));
        glDrawArrays(drawMode, 0, 6 * 2 * 3);
    }



}
void cubeList::pabloShuffle() {

    std::vector<glm::vec3> takenCoordinates;
    glm::vec3 objectCoordinate = glm::vec3(0.0f, 0.0f, 0.0f);
    takenCoordinates.push_back(objectCoordinate);
    glm::vec3 newCoordinate;
    bool noCollision;
    cubePositionsPabloShuffled[0] = cubePositionsPablo[0];

    for (int i = 1; i < 9; i++) {
        noCollision = false;

        while (!noCollision)
        {
            int zTranslateNormal = linearRand(-1, 1);
            newCoordinate = cubePositionsPablo[i];
            newCoordinate.z = zTranslateNormal;

            if (!(std::find(takenCoordinates.begin(), takenCoordinates.end(), (newCoordinate + objectCoordinate)) != takenCoordinates.end()))
            {
                noCollision = true;
                takenCoordinates.push_back(objectCoordinate + newCoordinate);
                objectCoordinate += newCoordinate;
                //newPositionsPablo[i] = newCoordinate;

            }
        }
    }

    //Check for disjointed cubes
    glm::vec3 coord = takenCoordinates[0];
    bool first = true;
    int rand = linearRand(0, 1);
    float x, y, z;
    for (int i = 1; i < 9; i++) {
        x = coord.x;
        y = coord.y;
        z = coord.z;

        //Disjointed from previous cube
        if (takenCoordinates[i].z < z - 1 || takenCoordinates[i].z > z + 1 || takenCoordinates[i].x < x - 1 || takenCoordinates[i].x > x + 1 || takenCoordinates[i].y < y - 1 || takenCoordinates[i].y > y + 1)
        {
            if (rand == 1) {
                takenCoordinates[i].z = z + 1;
                takenCoordinates[i].x = x;
                takenCoordinates[i].y = y;
            }
            else if (first) {
                takenCoordinates[i].z = takenCoordinates[2].z;
                takenCoordinates[i].x = takenCoordinates[2].x - 1;
                takenCoordinates[i].y = takenCoordinates[2].y;
                first = false;
            }
            else {
                takenCoordinates[i].z = z + 1;
                takenCoordinates[i].x = x;
                takenCoordinates[i].y = y;
            }



        }

        coord = takenCoordinates[i];
    }

    //Form the new positions
    cubePositionsPabloShuffled[0] = takenCoordinates[0];
    for (int i = 1; i < 9; i++) {
        cubePositionsPabloShuffled[i] = takenCoordinates[i] - takenCoordinates[i - 1];
    }
}

void cubeList::pabloToggleShuffle() {
    pabloShuffling = !pabloShuffling;
}


void cubeList::drawAkhiOrPabloWall(mat4 model_Matrix, Shader shader, int drawMode, std::string matName, vec3 wallPositions[], int size) {


    glm::mat4 view_Matrix = glm::mat4(1.0f);
    glm::mat4 projection_Matrix = glm::mat4(1.0f);
    glm::mat4 MVP_MATRIX;
    for (int i = 0; i < size; i++) {
        model_Matrix = glm::translate(model_Matrix, wallPositions[i]);
        //model_Matrix = glm::rotate(model_Matrix, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
        //view_Matrix = glm::translate(view_Matrix, glm::vec3(0.0, 0.0, -5.0f));

        MVP_MATRIX = projection_Matrix * view_Matrix * model_Matrix;

        unsigned int MVP;

        shader.setMat4(matName.c_str(), MVP_MATRIX);
        glDrawArrays(drawMode, 0, 36);


    }
}